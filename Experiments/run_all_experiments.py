"""
Run all experiments
"""

from pymongo import MongoClient
import xml.etree.ElementTree as ET
import experiments as exp
import json
import sys
import os

root = ET.parse("./../config.xml")

# Load all cves with a reporter for all projects
mozilla = dict()
with open('./../Reporters/CVE_2_Rep/reporters_mozilla-suite.json') as fp:
    mozilla = list(json.load(fp).keys())
    
linux = dict()
with open('./../Reporters/CVE_2_Rep/reporters_linux.json') as fp:
    linux = list(json.load(fp).keys())
    
apache = dict()
with open('./../Reporters/CVE_2_Rep/reporters_apache.json') as fp:
    apache = list(json.load(fp).keys())

php = dict()
with open('./../Reporters/CVE_2_Rep/reporters_php.json') as fp:
    php = list(json.load(fp).keys())

# create directories for results
dirNames = ["results", "results/reporter_across_projects", "results/reporter_dev_over_time", "results/reporter_distribution", "results/reporter_reporting_rate",
            "results/reporters_bug_bounties", "results/reporters_commiters", "results/reporters_employed", "results/reporters_fixing_vulnerabilities",
            "results/reporters_non_security_bugs", "results/reporters_social_media_reputation", "results/reporters_social_media_sec_related", "results/reporters_type_vulnerabilities"]
for dirName in dirNames:
    try:
        os.makedirs(dirName)    
        print("Directory " , dirName ,  " Created ")
    except FileExistsError:
        print("Directory " , dirName ,  " already exists")  


prj2cves = dict()
prj2cves['mozilla'] = mozilla
prj2cves['linux'] = linux
prj2cves['apache'] = apache
prj2cves['php'] = php

all_cves = []
for p, c in prj2cves.items():
     for cve in c:
            if cve not in all_cves:
                all_cves.append(cve)
                
print('All CVEs affecting the projects:', len(all_cves))

# Load all reporters with their information
rep2info = dict()
with open('./../Reporters/Rep_2_Info_5/rep2info_s4.json', 'r') as fp:
    rep2info = json.load(fp)

# Map CVEs to reporters 
cve2reps = dict()

for cve in all_cves:
    cve2reps[cve] = []

for rep in rep2info:
    for cve in rep2info[rep]['cves']:
        if cve in all_cves:
            cve2reps[cve].append(rep)

with_rep = 0
for cve in cve2reps:
    if cve2reps[cve] != []:
        with_rep += 1

print('Number of reporters:', len(rep2info))
num_CVEs = len(cve2reps)
print('CVEs with reporter information:', with_rep)
total_coverage = float(with_rep)/float(num_CVEs)
print('Total coverage %.2f%%' % (total_coverage * 100))

# build a mapping between cve and disclosure date (as stated in the NVD)
cve2year = dict()
for cve_id in all_cves:
    #cve = collection1.find_one({"id": cve_id})
    cve2year[cve_id] = int(cve_id[4:8])

# Load database of github project cve-search (https://github.com/cve-search/cve-search)
client = MongoClient()
db = client.cvedb
collection = db.cves

rep2cves_files = ["../Mappings/Rep_2_CVE/rep2cves-mozilla-suite.json",
                  "../Mappings/Rep_2_CVE/rep2cves-apache.json",
                  "../Mappings/Rep_2_CVE/rep2cves-linux.json",
                  "../Mappings/Rep_2_CVE/rep2cves-php.json"]
rep2non_cves_bugs_files = ["../Mappings/Rep_2_Bugs/rep2non-cve-bugs-mozilla-suite.json",
                          "../Mappings/Rep_2_Bugs/rep2non-cve-bugs-apache.json",
                          "../Mappings/Rep_2_Bugs/rep2non-cve-bugs-linux.json",
                          "../Mappings/Rep_2_Bugs/rep2non-cve-bugs-php.json"]
rep2cves_bugs_files = ["../Mappings/Rep_2_Bugs/rep2cve-bugs-mozilla-suite.json",
                          "../Mappings/Rep_2_Bugs/rep2cve-bugs-apache.json",
                          "../Mappings/Rep_2_Bugs/rep2cve-bugs-linux.json",
                          "../Mappings/Rep_2_Bugs/rep2cve-bugs-php.json"]                         
bug2commits_files = ["../Mappings/Bug_2_Commit/bug2commits-mozilla-suite.json",
                    "../Mappings/Bug_2_Commit/bug2commits-apache.json",
                    "../Mappings/Bug_2_Commit/bug2commits-linux.json",
                    "../Mappings/Bug_2_Commit/bug2commits-php.json"]
rep2commits_files = ["../Mappings/Rep_2_Commit/rep2commits-mozilla-suite.json",
                    "../Mappings/Rep_2_Commit/rep2commits-apache.json",
                    "../Mappings/Rep_2_Commit/rep2commits-linux.json",
                    "../Mappings/Rep_2_Commit/rep2commits-php.json"]
key_words = ["memory", "memory issue", "crash", "security"]
top_percentage = []# TODO [0.5]
DB = root.find("mongodb").find("db").text
db = client[DB]
c_core = root.find("projects").find('.//product[@name=\'mozilla-core\']').find("collection").text
c_firefox = root.find("projects").find('.//product[@name=\'firefox\']').find("collection").text
c_thunderbird = root.find("projects").find('.//product[@name=\'thunderbird\']').find("collection").text
c_linux = root.find("projects").find('.//product[@name=\'linux\']').find("collection").text
c_apache = root.find("projects").find('.//product[@name=\'apache\']').find("collection").text
c_php = root.find("projects").find('.//product[@name=\'php\']').find("collection").text
c_rep = root.find("reporters").find("collection").text

projects = ["Mozilla", "Apache", "Linux", "PHP"]
collections =  [[db[c_core], db[c_firefox], db[c_thunderbird]], [db[c_apache]], [db[c_linux]], [db[c_php]]]
rep_collection = db[c_rep]
cve2commits_files = ["../Mappings/CVE_2_Commit/cve2commits-mozilla-suite.json",
                    "../Mappings/CVE_2_Commit/cve2commits-linux.json",
                    "../Mappings/CVE_2_Commit/cve2commits-apache.json",
                    "../Mappings/CVE_2_Commit/cve2commits-php.json"]

repositories = [["./../../gecko-dev", "./../../releases-comm-central"], ["./../../linux"], ["./../../httpd"], ["./../../php-src"]]

to_search = [ r'vulnerabilit', r'security bug', r'CVE-\d{4}', r'fuzz', r'security' ]

def run_experiments(inv=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]):
    if 1 in inv:
        # 1
        exp.reporter_distribution(rep2info, prj2cves)
    if 2 in inv:
        # 2
        exp.number_reporters_over_time(2000, 2020, prj2cves, cve2reps, cve2year)
    if 3 in inv:
        # 3
        exp.multiple_projects(rep2info, prj2cves)
    if 4 in inv or 5 in inv:
        # 4/5 
        exp.reporting_rate(2000, 2020, rep2info, prj2cves, cve2year)
    if 6 in inv:
        # 6
        exp.reps_and_their_vulnerability_types(rep2info, prj2cves, cve2reps, all_cves, collection)
    if 7 in inv:
        # 7
        exp.bug_bounties(prj2cves, cve2reps, all_cves, './../Reporters/cve2bounty.json')
#    if 8 in inv:
#        # 8
#        exp.social_media_sec_rel(rep2info, './../Reporters/Linkedin/rep2profiles.json')
    if 9 in inv:
        # 9
        exp.social_media_reputation(rep2info, to_search, './../Reporters/Linkedin/rep2profiles.json')
    if 10 in inv:
        # 10
        exp.reporters_employed(rep2info, prj2cves, cve2reps, all_cves, './../Reporters/Linkedin/rep2profiles.json', './../Reporters/cve2bounty.json')
    if 11 in inv:
        # 11
        print("Running commiter experiments")
        exp.reporters_commiters(rep2info, prj2cves, rep2commits_files)
    if 12 in inv:
        # 12
        exp.bugs_reporters(projects, prj2cves, collections, rep_collection, rep2cves_files, rep2non_cves_bugs_files, rep2cves_bugs_files, bug2commits_files, key_words, top_percentage)
    if 13 in inv or 14 in inv:
        # 13/14
        exp.reporters_fixing_vulnerabilities(rep2info, repositories, list(prj2cves.keys()), cve2commits_files, cve2reps)

if __name__ =="__main__":
    if len(sys.argv) == 1:
        run_experiments()
    else:
        to_inv = []
        for i in range(1, len(sys.argv)):
            try:
                h_str = sys.argv[i]
                h_int = int(h_str)
                if h_int < 1 or h_int > 14:
                    print("Warning: Nothing to investigate for number", h_int)
                else:
                    to_inv.append(h_int)
            except:
                print("Warning:", h_str, "is not a valid hypothesis to investigate")
        run_experiments(to_inv)


