#!/usr/bin/env python
# coding: utf-8

# In[1]:


import json
import csv
from pymongo import MongoClient
import xml.etree.ElementTree as ET
from fuzzywuzzy import fuzz
import re


# In[2]:


root = ET.parse("./../../config.xml")

DB = root.find("mongodb").find("db").text
COLLECTION_1 = root.find("projects").find('.//product[@name=\'mozilla-core\']').find("collection").text
COLLECTION_2 = root.find("projects").find('.//product[@name=\'firefox\']').find("collection").text
COLLECTION_3 = root.find("projects").find('.//product[@name=\'thunderbird\']').find("collection").text
COLLECTION_4 = root.find("projects").find('.//product[@name=\'php\']').find("collection").text


# In[3]:


# This is just to load all known CVEs
with open("./../../Mappings/Project_2_CVE/project2cves.json") as jf:
    project2cves = json.load(jf)
    
projects = ["mozilla-suite", "apache", "linux", "php"]
    
all_cves = []
for p, cves in project2cves.items():
     if p in projects:
        for cve in cves:
            if cve not in all_cves:
                all_cves.append(cve)
print('All CVEs affecting the projects: ', len(all_cves))


# In[4]:


rep2info = dict()

with open('./../Rep_2_Info_3/rep2info_s2.json', 'r') as fp:
    rep2info = json.load(fp)


# In[5]:


cve2reps = dict()

for cve in all_cves:
    cve2reps[cve] = []

for rep in rep2info:
    for cve in rep2info[rep]['cves']:
        if cve in all_cves:
            cve2reps[cve].append(rep)


# In[6]:


with_rep = 0
for cve in cve2reps:
    if cve2reps[cve] != []:
        with_rep += 1


num_CVEs = len(cve2reps)
print("Number of cves with at least one reporter (all projects):", with_rep)
total_coverage = float(with_rep)/float(num_CVEs)
print("Coverage:", '%.2f' % total_coverage)


# In[7]:


# Now load Mozilla bug2cve and php bug2cve
with open('./../../CVE_2_Bug/cve2bugs-mozilla-suite.json') as fp:
    mozilla_cve2bugs = json.load(fp)
with open('./../../CVE_2_Bug/cve2bugs-php.json') as fp:
    php_cve2bugs = json.load(fp)


# In[8]:


client = MongoClient()
db = client[DB]
collections = [db[COLLECTION_1], db[COLLECTION_2], db[COLLECTION_3]]

bug = collections[0].find_one({})

if bug != None:
    print("Example bug in collection " + COLLECTION_1 + ":", bug['id'])
else:
    sys.exit("No bugs in database collection!")


# In[9]:


new = 0
extra = 0
cve2extra = dict()
cve2details = dict()
for cve in mozilla_cve2bugs:
    if mozilla_cve2bugs != [] and cve in all_cves:
        extra_reps = []
        extra_details = []
        for bug in mozilla_cve2bugs[cve]:
            for collection in collections:
                try:
                    temp = collection.find_one({'id': int(bug)})
                except ValueError:
                    print(bug)
                    break
                if temp != None:
                    new_rep = temp['creator']
                    details = temp['creator_detail']
                    extra_reps.append(new_rep)
                    extra_details.append(details)
                    print(cve, bug, cve2reps[cve], new_rep, details)
        cve2extra[cve] = extra_reps
        cve2details[cve] = extra_details
        
        if cve2reps[cve] == []:
            new += 1
        else:
            extra += 1

print(new, extra)


# In[ ]:


num_updates = 0

for cve in cve2extra:
    
    oldnames = cve2reps[cve]
    
    if oldnames == [] or (len(oldnames) == 1 and re.match(r'.*mozilla.*', oldnames[0], re.IGNORECASE)):
        
        # If no known reporter, add reporter + email + details
        # If *only* known reporter is Mozilla*, do the same, else *do NOT add*
        
        Found = False
        num_updates += 1
        
        for newrep in cve2extra[cve]:
            
            for det in cve2details[cve]:
                if det['name'] == newrep:
                    realname = det['real_name']
                    newmail = det['email']
                    nick = det['nick']
                    break
            
            for rep in rep2info:
                if rep == newrep or rep == realname or newmail in rep2info[rep]['emails'] or (fuzz.ratio(rep, newrep)>90) or (fuzz.ratio(rep, realname)>90):
                
                    #print('Found similar names', rep, realname)
                    #print('#'*80)
                
                    # Here we could remove the cve entry for the other reporter but we do not do so in this version of the code
                
                    rep2info[rep]['cves'].append(cve)
            
                    if newmail not in rep2info[rep]['emails']:
                        rep2info[rep]['emails'].append(newmail)
                    if nick not in rep2info[rep]['alias']:
                        rep2info[rep]['alias'].append(nick)
                    
                    Found = True
                    break
            
            if not Found:
                rep2info[realname] = dict()
                rep2info[realname]['cves'] = []
                rep2info[realname]['affs'] = []
                rep2info[realname]['emails'] = []
                rep2info[realname]['twitter'] = []
                rep2info[realname]['misc'] = []
                rep2info[realname]['alias'] = []
                rep2info[realname]['type'] = 'p'
            
                rep2info[realname]['cves'].append(cve)
                rep2info[realname]['emails'].append(newmail)
                rep2info[realname]['alias'].append(nick)
    
    else:
        # If known reporter is (almost) equal, add email + nick if not there. Else do not add anything
        oldnames = cve2reps[cve]
        newnames = cve2extra[cve]
        
        Found_old = False
        Found = False
        
        for newrep in newnames:            
            for det in cve2details[cve]:
                if det['name'] == newrep:
                    realname = det['real_name']
                    nick = det['nick']
                    newmail = det['email']
                    break
                    
            for rep in oldnames:
                if rep == newrep or rep == realname or newmail in rep2info[rep]['emails'] or (fuzz.ratio(rep, newrep)>90) or (fuzz.ratio(rep, realname)>90):
                    #print('Found similar names for the same CVE', rep, realname)
                    #print('#'*80)
                    Found_old = True
                    if newmail not in rep2info[rep]['emails']:
                        rep2info[rep]['emails'].append(newmail)
                    if nick not in rep2info[rep]['alias']:
                        rep2info[rep]['alias'].append(nick)
    
# print(num_updates)


# In[ ]:


# Now the same for PHP
new = 0
extra = 0
cve2extra = dict()
cve2details = dict()
for cve in php_cve2bugs:
    if php_cve2bugs != [] and cve in all_cves:
        extra_reps = []
        extra_details = []
        for bug in php_cve2bugs[cve]:
            collection = db[COLLECTION_4]
            try:
                temp = collection.find_one({'id': str(bug)})
            except ValueError:
                #print(bug)
                break
            if temp != None:
                new_rep = temp['creator']
                extra_reps.append(new_rep)
                #print(cve, bug, cve2reps[cve], new_rep)
            #else:
            #    print('None bug for ', bug)
        
        cve2extra[cve] = extra_reps
        cve2details[cve] = extra_details
        
        if cve2reps[cve] == []:
            new += 1
        else:
            extra += 1

#print(new, extra)


# In[ ]:


num_updates = 0

for cve in cve2extra:
    
    oldnames = cve2reps[cve]
    
    if oldnames == [] or (len(oldnames) == 1 and re.match(r'.*mozilla.*', oldnames[0])):
        
        # If no known reporter, add reporter + email + details
        # If *only* known reporter is Mozilla*, do the same, else *do NOT add*
        
        Found = False
        num_updates += 1
        
        for newrep in cve2extra[cve]:
            
            newmail = newrep
            
            for rep in rep2info:
                if rep == newrep or newmail in rep2info[rep]['emails'] or (fuzz.ratio(rep, newrep)>90):
                
                    #print('Found similar names', rep, newrep)
                    #print('#'*80)
                
                    # Here we could remove the cve entry for the other reporter but we do not do so in this version of the code
                
                    rep2info[rep]['cves'].append(cve)
            
                    if newmail not in rep2info[rep]['emails']:
                        rep2info[rep]['emails'].append(newmail)
                    
                    Found = True
                    break
            
            if not Found:
                rep2info[newrep] = dict()
                rep2info[newrep]['cves'] = []
                rep2info[newrep]['affs'] = []
                rep2info[newrep]['emails'] = []
                rep2info[newrep]['twitter'] = []
                rep2info[newrep]['misc'] = []
                rep2info[newrep]['alias'] = []
                rep2info[newrep]['type'] = 'p'
            
                rep2info[newrep]['cves'].append(cve)
                rep2info[newrep]['emails'].append(newmail)
    
    else:
        # If known reporter is (almost) equal, add email + nick if not there. Else do not add anything
        oldnames = cve2reps[cve]
        newnames = cve2extra[cve]
        
        Found_old = False
        Found = False
        
        for newrep in newnames:
            
            newmail = newrep
                    
            for rep in oldnames:
                if rep == newrep or newmail in rep2info[rep]['emails'] or (fuzz.ratio(rep, newrep)>90):
                    #print('Found similar names for the same CVE', rep, realname)
                    #print('#'*80)
                    Found_old = True
                    if newmail not in rep2info[rep]['emails']:
                        rep2info[rep]['emails'].append(newmail)
                        
#print(num_updates)


# In[ ]:


for cve in all_cves:
    cve2reps[cve] = []

for rep in rep2info:
    for cve in rep2info[rep]['cves']:
        if cve in all_cves:
            cve2reps[cve].append(rep)

with_rep = 0
for cve in cve2reps:
    if cve2reps[cve] != []:
        with_rep += 1


num_CVEs = len(cve2reps)
print(len(cve2reps))
print(with_rep)
total_coverage = float(with_rep)/float(num_CVEs)
print('%.2f' % total_coverage)

with open('rep2info_s3.json', 'w') as fp:
    json.dump(rep2info, fp)

# It would make some sense to do the same for Linux and apache bug reports but since those projects don't
# use their bug-tracking systems fo security issues, it is arguably (a) not worth it, and (b) a source of bias


# In[ ]:




