import time
import random
import json
import sys
import os
from linkedin_api import Linkedin

def make_correction(rep, public_id):
    
    tempdict = dict()
    
    if public_id is not None:
        time.sleep(10 + random.randint(1,5))
        profile = api.get_profile(public_id)
        tempdict['profile'] = profile
    
    with open('./Linkedin/rep_' + rep.replace('/','') + '.json', 'w') as fp:
        json.dump(tempdict,fp)
       

# create Linkedin folder if not exists
if not os.path.exists('./Linkedin'):
    os.makedirs('Linkedin')

# Load keywords to search in profiles
#keywords = []
#for i in range(2, len(sys.argv)):
#    keywords.append(sys.argv[i])

# This is just to load all known CVEs
with open("./../Mappings/Project_2_CVE/project2cves.json") as jf:
    project2cves = json.load(jf)
    
projects = ["mozilla-suite", "apache", "linux", "php"]
    
all_cves = []
for p, cves in project2cves.items():
     if p in projects:
        for cve in cves:
            if cve not in all_cves:
                all_cves.append(cve)
print('All CVEs affecting the projects: ', len(all_cves))


# Load mapping from reporters to information
rep2info = dict()
with open('./../Reporters/Rep_2_Info_5/rep2info_s4.json', 'r') as fp:
    rep2info = json.load(fp)

# Create mapping from cve to reporters reporting them
cve2reps = dict()

for cve in all_cves:
    cve2reps[cve] = []

for rep in rep2info:
    for cve in rep2info[rep]['cves']:
        if cve in all_cves:
            cve2reps[cve].append(rep)

# Create mapping from reporters to number of reports per project
rep2proj = dict()
for rep in rep2info:
    rep2proj[rep] = dict()
    for project in projects:
        rep2proj[rep][project] = 0
    for cve in rep2info[rep]['cves']:
        for project in projects:
            if cve in project2cves[project]:
                rep2proj[rep][project] += 1


# Find reporters reporting for at least two projects
mult_rep = []            
for rep in rep2proj:
    flag = False
    for project in projects:
        if rep2proj[rep][project] != 0:
            if flag:
                mult_rep.append(rep)
                break
            else:
                flag = True

# Load linkedin credentials to login in 
with open('credentials.json', 'r') as fp:
    credentials = json.load(fp)

api = Linkedin(credentials['username'], credentials['password'], refresh_cookies=True)

# Save all reporters in a sorted list
all_reps = []

rep2num = dict()
for rep in rep2info:
    rep2num[rep] = len(rep2info[rep]['cves'])
sorted_dict = {k: v for k, v in sorted(rep2num.items(), key=lambda item: item[1], reverse = True)}

for rep in sorted_dict:
    all_reps.append(rep)

i = 0

print(all_reps)

# Get profile of reporters
for rep in all_reps:
    tempdict = dict()
    
    # Only people 
    if rep2info[rep]['type'] == ['t'] or rep2info[rep]['type'] == ['c']:
        continue
    
    # time.sleep(10 + random.randint(1,5))
    #time.sleep(random.randint(1,10))

    keywords = rep + ',computer security'
    print("Keywords:", keywords)
    #for keyword in keywords:
    #    keywords += ',' + keyword
    
    # The dataset we use is only 1 hit per rep
    results = []
    try:
        results = api.search_people(keywords = keywords, limit = 3)
    except:
        time.sleep(600)
        try:
            results = api.search_people(keywords = keywords, limit = 3)
        except:
            print("Warning. Could not find people for keywords", keywords)
            continue
    print(results)
    if len(results) > 0:
        #time.sleep(10 + random.randint(1,5))
        #time.sleep(random.randint(1,5))
        try:
            profile = api.get_profile(results[0]['public_id'])
        except:
            time.sleep(600)
            try:
                profile = api.get_profile(results[0]['public_id'])
            except:
                print("Warning. Could not get profile", results[0]['public_id'])
                continue
    else:
        continue

    tempdict['profile'] = profile
    with open('./Linkedin/rep_' + rep.replace('/','') + '.json', 'w') as fp:
        json.dump(tempdict,fp)
        i += 1

# Some manual corrections
corrections = {'Nils' : 'nilsjuenemann', 'Tyson Smith' : 'tysonws', 'Andrey Konovalov' : 'xairy', 'Bob Clary' : 'bob-c-9365ba5',
              'Rob Wu' : 'robwunl', 'Alex Gaynor' : None, 'Chris Evans' : 'scarybeast', 'Ben Kelly' : 'wanderview'}

for rep in corrections:
    make_correction(rep, corrections[rep])
    i += 1

print("Found a linkedin profile for " + str(i) + " reporters.")
