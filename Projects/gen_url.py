#!/bin/python

"""
Generates the url for fetching bugs from bugzilla APIs.
Needs the folder (PROJECT) as parameter in which a spec.json file is determining the parameters.
Creates a url for the usage of the API.
"""

import json
import sys

if len(sys.argv) < 2:
    print("usage: python gen_url_monthly.py <PROJECT.name = FOLDER> [option]")
    print("Options and arguments:")
    print("-s:\tthe json file specifying the structure of the url (default: 'spec.json')")
    print("-u:\tthe name of the file for saving the generated url")
    print("-e:\tgenerates also the urls to fetch only ids and one bug")
else:
    folder = sys.argv[1]
    spec_file = "spec.json"
    url_file = "url"
    extra_urls = False
    try:
        if "-s" in sys.argv:
            index = sys.argv.index("-s")
            spec_file = sys.argv[index+1]
        if "-u" in sys.argv:
            index = sys.argv.index("-u")
            url_file = sys.argv[index+1]
        if "-e" in sys.argv:
            extra_urls = True
    except:
        sys.exit("Error: Something went wrong with the given arguments!")
    try:
        with open("./" + folder + "/" + spec_file) as spec_f:
            spec = json.load(spec_f)
    except:
        sys.exit("Error: File <" + spec_file + "> could not be found!")

    # fetch parts of URL
    base_url = "https://" + spec["base_url"] + "bug?"

    include_fields = ""
    for field in spec["include_fields"]:
        include_fields += field
        include_fields += ","
    include_fields = include_fields[:len(include_fields)-1]
    print("Include fields:", include_fields)
    if include_fields != "":
        include_fields_url = "include_fields=" + include_fields + "&"
    else:
        include_fields_url = ""

    bug_status = ""
    for status in spec["bug_status"]:
        bug_status += status
        bug_status += ","
    bug_status = bug_status[:len(bug_status)-1]
    print("Bug status:", bug_status)
    if bug_status != "":
        bug_status_url = "bug_status=" + bug_status + "&"
    else:
        bug_status_url = ""

    chfield = spec["chfield"]
    print("Chfield:", chfield)
    if chfield != "":
        chfield_url = "chfield=[" + chfield + "]&"
    else:
        chfield_url = ""

    chfieldfrom = spec["chfieldfrom"]
    print("Chfieldfrom:", chfieldfrom)
    if chfieldfrom != "":
        chfieldfrom_url = "chfieldfrom=" + chfieldfrom + "&"
    else:
        chfieldfrom_url = ""

    chfieldto = spec["chfieldto"]
    print("Chfieldto:", chfieldto)
    if chfieldto != "":
        chfieldto_url = "chfieldto=" + chfieldto + "&"
    else:
        chfieldto_url = ""

    classification = ""
    for c in spec["classification"]:
        classification += c
        classification += ","
    classification = classification[:len(classification)-1]
    print("Classifications:", classification)
    if classification != "":
        classification_url = "classification=" + classification + "&"
    else:
        classification_url = ""

    component = ""
    for c in spec["component"]:
        component += c.replace(":", "%3A")
        component += ","
    component = component[:len(component)-1]
    print("Components:", component)
    if component != "":
        component_url = "component=" + component + "&"
    else:
        component_url = ""

    product = ""
    for p in spec["product"]:
        product += p
        product += ","
    product = product[:len(product)-1]
    product = product
    print("Products:", product)
    if product != "":
        product_url = "product=" + product + "&"
    else:
        product_url = ""

    resolution = ""
    for r in spec["resolution"]:
        resolution += r
        resolution += ","
    resolution = resolution[:len(resolution)-1]
    resolution = resolution
    print("Resolutions:", resolution)
    if resolution != "":
        resolution_url = "resolution=" + product + "&"
    else:
        resolution_url = ""

    order = spec["order"].replace(",", "%2C")
    print("Order:", order)
    if order != "":
        order_url = "order=" + order + "&"
    else:
        order_url = ""

    limit = spec["limit"]
    print("Limit:", limit)
    if limit != "":
        limit_url = "limit=" + limit + "&"
    else:
        limit_url = ""

    # create base URL
    url = base_url 
    url += include_fields_url 
    url += bug_status_url
    url += chfield_url 
    url += chfieldfrom_url
    url += chfieldto_url 
    url += classification_url 
    url += component_url
    url += product_url
    url += resolution_url
    url += order_url
    url += limit_url

    url = url[:len(url)-1]
    url = url.replace(" ", "%20")
    #url = url.replace(":", "%3A")
    #url = url.replace(",", "%2C")

    print("URL:", url)

    if(folder[len(folder)-1:] == "/"):
        f = open(folder + url_file, "w")
    else:
        f = open(folder + "/" + url_file, "w")
    f.write(url + "\n")

    # create extra urls
    if extra_urls:
        url_ids = base_url
        url_ids += "include_fields=id&"
        url_ids += bug_status_url
        url_ids += chfield_url 
        url_ids += chfieldfrom_url
        url_ids += chfieldto_url 
        url_ids += classification_url 
        url_ids += component_url
        url_ids += product_url
        url_ids += resolution_url
        url_ids += order_url
        url_ids += limit_url

        url_ids = url_ids[:len(url_ids)-1]
        url_ids = url_ids.replace(" ", "%20")

        url_one_id = base_url
        url_one_id += include_fields_url
        url_one_id += bug_status_url
        url_one_id += chfield_url
        url_one_id += chfieldfrom_url
        url_one_id += chfieldto_url
        url_one_id += classification_url
        url_one_id += component_url
        url_one_id += product_url
        url_one_id += resolution_url
        url_one_id += order_url
        url_one_id += limit_url
        url_one_id += "id=$id&"

        url_one_id = url_one_id[:len(url_one_id)-1]
        url_one_id = url_one_id.replace(" ", "%20")

        print("URL (only ids):", url)
        print("URL (one id):", url)

        if(folder[len(folder)-1:] == "/"):
            f = open(folder + url_file + "_ids", "w")
            g = open(folder + url_file + "_one_id", "w")
        else:
            f = open(folder + "/" + url_file + "_ids", "w")
            g = open(folder + "/" + url_file + "_one_id", "w")
        f.write(url_ids + "\n")
        g.write(url_one_id + "\n")

