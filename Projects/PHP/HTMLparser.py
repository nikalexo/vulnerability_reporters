from bs4 import BeautifulSoup

def parse_all(bug):
    soup = BeautifulSoup(bug, "html.parser")
    data = []
    try:
        data.append(parse_id(soup))
    except:
        data.append("")
        return data
    data.append(parse_summary(soup))
    data.append(parse_submitted(soup))
    data.append(parse_modified(soup))
    data.append(parse_submitter(soup))
    data.append(parse_status(soup))
    data.append(parse_package(soup))
    data.append(parse_version(soup))
    data.append(parse_os(soup))
    data.append(parse_private_report(soup))
    data.append(parse_cve(soup))
    data.append(parse_type(soup))
    data.append(parse_assigned(soup))
    data.append(parse_description(soup))
    data.append(parse_comments(soup))
    

    return data

def parse_id(soup):
    title = soup.findAll("tr", {"id": "title"})
    id_ = title[0].findNext("th").getText().split("\xa0")[1][1:]
    return id_

def parse_summary(soup):
    title = soup.findAll("tr", {"id": "title"})
    summary = title[0].findNext("td").getText()
    return summary

def parse_type(soup):
    title = soup.findAll("tr", {"id": "title"})
    type_ = title[0].findNext("th").getText().split("\xa0")[0]
    return type_

def parse_submitted(soup):
    submission = soup.findAll("tr", {"id": "submission"})
    submitted = submission[0].findNext("td").getText()
    return submitted

def parse_modified(soup):
    submission = soup.findAll("tr", {"id": "submission"})
    modified = submission[0].findNext("td").findNext("td").getText()
    return modified

def parse_submitter(soup):
    submitter = soup.findAll("tr", {"id": "submitter"})[0].findNext("td").getText()
    submitter = submitter.replace(" at ", "@")
    submitter = submitter.replace(" dot ", ".")
    return submitter

def parse_status(soup):
    status = soup.findAll("tr", {"id": "categorization"})[0].findNext("td").getText()
    return status

def parse_package(soup):
    package = soup.findAll("tr", {"id": "categorization"})[0].findNext("td").findNext("td").getText()
    return package

def parse_version(soup):
    version = soup.findAll("tr", {"id": "situation"})[0].findNext("td").getText()
    return version

def parse_os(soup):
    os = soup.findAll("tr", {"id": "situation"})[0].findNext("td").findNext("td").getText()
    return os

def parse_private_report(soup):
    private = soup.findAll("tr", {"id": "private"})[0].findNext("td").getText()
    return private

def parse_cve(soup):
    cve = soup.findAll("tr", {"id": "private"})[0].findNext("td").findNext("td").getText()
    return cve

def parse_description(soup):
    structured_comments = []

    comments = soup.findAll("div", {"class": "comment type_comment"})

    try:
        comment_content = comments[0].findNext("pre").getText()[:-1]
        comment_content = comment_content.replace('\\', "\\\\")
        comment_content = comment_content.replace('"', '\\\"')
        comment_content = comment_content.replace('\b', "\\b")
        comment_content = comment_content.replace('\f', "\\f")
        comment_content = comment_content.replace('\n', " ")
        comment_content = comment_content.replace('\r', "\\r")
        comment_content = comment_content.replace('\t', "\\t")
    except:
        return []

    description  = comment_content

    return description

def parse_comments(soup):
    structured_comments = []

    comments = soup.findAll("div", {"class": "comment type_comment"})
    for i in range(1, len(comments)):       # starting at 1 to remove description
        comment_meta = comments[i].findNext("strong").getText()

        end_position_time = comment_meta.find("]") + 1
        comment_time = comment_meta[:end_position_time]
        comment_author = comment_meta[end_position_time + 1:]

        comment_content = comments[i].findNext("pre").getText()[:-1]
        comment_content = comment_content.replace('\\', "\\\\")
        comment_content = comment_content.replace('"', '\\\"')
        comment_content = comment_content.replace('\b', "\\b")
        comment_content = comment_content.replace('\f', "\\f")
        comment_content = comment_content.replace('\n', " ")
        comment_content = comment_content.replace('\r', "\\r")
        comment_content = comment_content.replace('\t', "\\t")

        structured_comments.append([comment_time[1:-1], comment_author, comment_content])

    return structured_comments

def parse_assigned(soup):
    submitter = soup.findAll("tr", {"id": "submitter"})
    try:
        assigned = submitter[0].findNext("th").findNext("th").findNext("td").getText()
    except:
        assigned = ""
    return assigned
