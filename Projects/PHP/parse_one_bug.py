#!/bin/python

"""
Downloads one bug as html from 'bugs.php.net', parses it
and stores the bugs in a json entry.
"""

from HTMLParser import BugPHPHTMLParser
import extraParser
import multiprocessing
import time
import wget
import sys
import os

CONFIG = "s"
FOLDER = "bugs"
DATA_LENGTH = 15
BUG_ID = 5000



def parse_bugs_standard_proccess(bug_id):
    if os.path.exists("bug" + str(os.getpid())):
        os.remove("bug" + str(os.getpid()))
    url = "https://bugs.php.net/bug.php?id=" + str(bug_id)
    wget.download(url, "bug" + str(os.getpid()))

    print("\nSuccess!")

    try:
        with open("bug" + str(os.getpid())) as f:
            bug = f.read()
    except IOError:
        print("Error: File 'bug" +  + str(os.getpid()) + "' not found.")
        exit()

    print("Starting parsing ...")
    data = extraParser.parse_all(bug)
    print("Successfully parsed HTML file!")

    #print(parser.data)
    if os.path.exists("bug" + str(os.getpid())):
        os.remove("bug" + str(os.getpid()))
    
    
    # check on meaningful parsed data
    bug_data = [data]
    
    print(bug_data)
    
    if data[0] == "":
        print("ATTENTION! Bug not found!")
    elif len(data) != DATA_LENGTH:
        print("ATTENTION! 'data' array has not the correct length!")
    else:
        create_json(bug_data, FOLDER + "/php_test.json")
    
def create_json(bug_data, path):
    # product means package
    fields = ["id", "summary", "creation_time", "modification_time", "creator", "status", "product", "version", "os", "private_report", "cve-id", "type", "assigned", "description"]
    json_format = "{\"bugs\":["
    for bug in bug_data:
        json_format += "{"
        for i in range(len(fields)):
            json_format += "\"" + fields[i] + "\"" + ":" + "\"" + bug[i] + "\","
        json_format += create_json_comments(bug[-1])
        json_format += "},"
    json_format = json_format[:len(json_format)-1]
    json_format += "]}"

    create_folder_if_not_exists(FOLDER)
    with open(path, "w") as f:
        f.write(json_format)

    print("Successfully created json file!")

def create_json_comments(comments):
    fields = ["time", "creator", "text"]
    json_format = "\"comments\":["
    for comment in comments:
        json_format += "{"
        for i in range(len(fields)):
            json_format += "\"" + fields[i] + "\"" + ":" + "\"" + comment[i] + "\","
        json_format = json_format[:len(json_format)-1]
        json_format += "},"
    json_format = json_format[:len(json_format)-1]
    json_format += "]"
    return json_format

def create_folder_if_not_exists(folder):
    if not os.path.exists("./" + folder + "/"):
        os.mkdir("./" + folder)

parse_bugs_standard_proccess(BUG_ID)