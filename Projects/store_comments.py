#!/bin/python

"""
Stores seperately fetched comments in mongodb databases.
"""

import sys
import json
from pymongo import MongoClient
import xml.etree.ElementTree as ET

progressbar_width = 40
last_total_int = 0

def print_progressbar():
    global progressbar_width, last_total_int
    sys.stdout.write("[%s]" % (" " * progressbar_width))
    sys.stdout.flush()
    sys.stdout.write("\b" * (progressbar_width+1))
    for i in range(last_total_int):
        sys.stdout.write("#")
    sys.stdout.flush()

################################################################################################################

root = ET.parse("./../config.xml") 

PROJECT = ""
COMMENTS_FILE = ""
COLLECTION = ""
DB = root.find("mongodb").find("db").text

if len(sys.argv) < 2:
    print("Usage: python store_comments.py <PROJECT.name = FOLDER> [option]..")
    print("-f:\tthe json file containing the comments (default PROJECT/PROJECT.lower_comments.json")
    print("-c:\tthe mongodb collection of the project given by project name in config.xml (default PROJECT.lower as project name)")
    print("Example: python store_comments.py LINUX -f linux_comments.json")
    sys.exit()

# Set project name
PROJECT = sys.argv[1]
if PROJECT[len(PROJECT)-1:] != "/":
        PROJECT += "/"

# Set file name with comments
COMMENTS_FILE = PROJECT + PROJECT[:-1].lower() + "_comments.json"

# Set collection name
COLLECTION = root.find("projects").find('.//product[@name=\'' + PROJECT.lower()[:-1] + '\']').find("collection").text

try:
    if "-f" in sys.argv:
        index = sys.argv.index("-f")
        COMMENTS_FILE = PROJECT + sys.argv[index+1]
    if "-c" in sys.argv:
        index = sys.argv.index("-c")
        COLLECTION = root.find("projects").find('.//product[@name=\''+ sys.argv[index+1] + '\']').find("collection").text
except:
    sys.exit("Error: Something went wrong with the given arguments!")

with open(COMMENTS_FILE) as jf:
    bug2comments = json.load(jf)

# Connect to Mongodb
client = MongoClient()

# Get database
db = client[DB]
print("Database: " + str(db.name.encode("utf-8")))

# Check if database exists
dblist = client.list_database_names()
if db.name in dblist:
    print("The database already exists.")
else:
    print("Error: The database doesn't exists. Can not insert comments because of missing bugs!")
    sys.exit()

# Check if collection exists
collection = db[COLLECTION]
print("Collection: " + collection.name + "\n")
if collection.count_documents({}) == 0:
    print("Error: The collection doesn't exists. Can not insert comments because of missing bugs!")
    sys.exit()

# Load comments
with open(COMMENTS_FILE) as jf:
    bug2commits = json.load(jf)

# Set comments field in collection to empty list if field doesn't exitst in documents
match = collection.find_one({"comments": { "$exists": False }})
if match != None:
    print("Set comments field in bugs with no such field to empty list...", end=" ", flush=True)
    for doc in collection.find({"comments": { "$exists": False }}):
        collection.update_one({"id":doc['id']}, {"$set": { "comments": []}}, upsert=False)
    print("Done\n")

print("Starting storing comments for project '" + COLLECTION + "' in database...")

# Stup progressbar
print_progressbar()
counter = 1

for bug in bug2commits.keys():
    collection.update_one({"id":int(bug)}, {"$set": { "comments": bug2commits[bug]}})

    # Update the progressbar
    counter += 1
    while last_total_int < (progressbar_width*(counter/len(list(bug2commits.keys())))):
        if last_total_int < progressbar_width:
            sys.stdout.write("#")
            sys.stdout.flush()
        last_total_int += 1
print("\nDone\n")

print("Inserted comments for " + str(len(list(bug2commits.keys()))) + " bugs.")




