import sys
import os
import re
import subprocess
import traceback
import json

"""
Checks the json files for encoding errors due to too many bugs per month.
If an encoding error occurs, the bugs of this month and year will be again fetched 
but in files per day.
"""

# Progressbar
progressbar_width = 40
last_total_int = 0

def print_progressbar():
    global progressbar_width, last_total_int
    sys.stdout.write("[%s]" % (" " * progressbar_width))
    sys.stdout.flush()
    sys.stdout.write("\b" * (progressbar_width+1))
    for i in range(last_total_int):
        sys.stdout.write("#")
    sys.stdout.flush()

##############################################################################################

if len(sys.argv) < 2:
    print("Usage: python check_json_files.py <project> [option]..")
    print("-b:\tthe folder in the Project containing the bugs (default: 'bugs_<project>')")
    print("Example: python check.json_files.py core")
    sys.exit()

# Set project name
PROJECT = sys.argv[1]
BUGS_FOLDER = "bugs_" + PROJECT

try:
    if "-b" in sys.argv:
        index = sys.argv.index("-b")
        BUGS_FOLDER = sys.argv[index+1]
except:
    sys.exit("Error: Something went wrong with the given arguments!")
    
# Take care that monthly folder ends with one slash '/'
if BUGS_FOLDER[-1] != "/":
    BUGS_FOLDER += "/"

##############################################################################################

# Check formatting of json files
print("Check formatting of json files...")

# setup progressbar
print_progressbar()
counter = 1

for filename in sorted(os.listdir(BUGS_FOLDER)):
    month_file = BUGS_FOLDER + filename
    with open(month_file) as json_bugs_1:
        try:
            bugs = json.load(json_bugs_1)
        except:
            print('\nFailed to load json file:', filename)
            if re.match(r'firefox', filename):
                subproject = 'firefox'
            elif re.match(r'core', filename):
                subproject = 'core'
            elif re.match(r'thunderbird', filename):
                subproject = 'thunderbird'
            else:
                continue
            s = filename.split("-")
            year = s[0].split("_")[1]
            month = s[1].split(".")[0]

            success = True

            print('Retrying all bugs for year', year, 'month', month, 'day by day...')

            for day in range(1, 32):
                day = str(day)
                rc = subprocess.call(['./retry_' + PROJECT + '_day.sh', year, month, day])

                day_file = BUGS_FOLDER + subproject + "_" + year + "-" + month + "-" + day + ".json"
                with open(day_file) as json_bugs_2:
                    try:
                        bugs = json.load(json_bugs_2)
                        if bugs["bugs"] == []:
                            os.remove(day_file)
                    except:
                        os.remove(day_file)
                        print('Retrying all bugs for year', year, 'month', month, 'day', day, 'id by id...')
                        rc = subprocess.call(['./retry_' + PROJECT + '_ids.sh', year, month, day])
                        try:
                            with open(PROJECT + "_" + year + "-" + month + "-" + day + "-ids.json") as file_ids:
                                ids = json.load(file_ids)
                            for bug in ids['bugs']:
                                rc = subprocess.call(['./retry_' + PROJECT + '_one_id.sh', year, month, day, str(bug['id'])])
                                id_file = BUGS_FOLDER + subproject + "_" + year + "-" + month + "-" + day + "_" + str(bug['id']) + ".json"
                                with open(id_file) as json_bugs_3:
                                    try:
                                        bugs = json.load(json_bugs_3)
                                    except:
                                        success = False
                                        print("Retrying failed for bug " + str(bug['id']) + ". Delete its json file...")
                                        os.remove(id_file)
                            print_progressbar()
                        except:
                            print('Retrying id by id failed!')
                            traceback.print_exc()

                        os.remove(PROJECT + "_" + year + "-" + month + "-" + day + "-ids.json")
            os.remove(month_file)
        print_progressbar()

    # update the bar
    counter += 1
    while last_total_int < (progressbar_width*(counter/len(os.listdir(BUGS_FOLDER)))):
        if last_total_int < progressbar_width:
            sys.stdout.write("#")
            sys.stdout.flush()
        last_total_int += 1
print("\nDone")
