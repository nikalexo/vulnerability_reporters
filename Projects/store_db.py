#!/bin/python

"""
Stores fetched bugs in mongodb databases.
"""

import sys
import json
import os
from pymongo import MongoClient 
import xml.etree.ElementTree as ET
import traceback

progressbar_width = 40
last_total_int = 0

def print_progressbar():
    global progressbar_width, last_total_int
    sys.stdout.write("[%s]" % (" " * progressbar_width))
    sys.stdout.flush()
    sys.stdout.write("\b" * (progressbar_width+1))
    for i in range(last_total_int):
        sys.stdout.write("#")
    sys.stdout.flush()

################################################################################################################

root = ET.parse("./../config.xml") 

PROJECT = ""
BUGS_FOLDER = "bugs/"
COLLECTION = ""
DELETE_JSON = False
DB = root.find("mongodb").find("db").text

if len(sys.argv) < 2:
    print("Usage: python store_db.py <PROJECT.name = FOLDER> [option]..")
    print("-b:\tthe folder in the Project containing the bugs (default 'bugs')")
    print("-c:\tthe project name in config.xml including the project specific collection name (default PROJECT.lower as project name)")
    print("-s:\tthe year to start with")
    print("-e:\tthe year to end with")
    print("-d:\tdelete the json files containing the bugs")
    print("Example: python store_db.py LINUX -b bugs -d")
    sys.exit()

# Set project name
PROJECT = sys.argv[1]
if PROJECT[len(PROJECT)-1:] != "/":
        PROJECT += "/"

# Set collection name
try:
    COLLECTION = root.find("projects").find('.//product[@name=\'' + PROJECT.lower()[:-1] + '\']').find("collection").text
except:
    COLLECTION == None

try:
    START = int(root.find("projects").find('.//product[@name=\'' + PROJECT.lower()[:-1] + '\']').find("bugs").find("begin").text)
    END = int(root.find("projects").find('.//product[@name=\'' + PROJECT.lower()[:-1] + '\']').find("bugs").find("end").text)
except: 
    START = None
    END = None

try:
    if "-b" in sys.argv:
        index = sys.argv.index("-b")
        BUGS_FOLDER = sys.argv[index+1]
    if "-c" in sys.argv:
        index = sys.argv.index("-c")
        COLLECTION = root.find("projects").find('.//product[@name=\''+ sys.argv[index+1] + '\']').find("collection").text
    if "-d" in sys.argv:
        DELETE_JSON = True
    if "-s" in sys.argv:
        index = sys.argv.index("-s")
        START = int(sys.argv[index+1])
        if "-e" in sys.argv:
            index = sys.argv.index("-e")
            END = int(sys.argv[index+1])
        else:
            sys.exit("Only year to start is given. Year to end is missing!")
except:
    traceback.print_exc()
    sys.exit("Error: Something went wrong with the given arguments!")

if COLLECTION == None:
    sys.exit("Error: Collection name could not set successfully!")

# Take care that monthly folder ends with one slash '/'
BUGS_FOLDER += "/"

# Set up list of years 
try:
    years = range(START, END+1)
except:
    years = []

# Connect to Mongodb
client = MongoClient()

# Get database
db = client[DB]
print("Database: " + str(db.name.encode("utf-8")))

# Check if database already exists
dblist = client.list_database_names()
if db.name in dblist:
    print("The database already exists.")
else:
    print("The database does not exists. Creating it...")

# Create or import collection for specified project
collection = db[COLLECTION]
print("Collection: " + collection.name + "\n")

# Remove all data in collection
print("Removing all old entries in collection...", end=" ", flush=True)
collection.delete_many({})
print("Done\n")

# Check formatting of json files
print("Check formatting of json files...")

# setup progressbar
print_progressbar()
counter = 1

for filename in sorted(os.listdir(PROJECT + BUGS_FOLDER)):
    if START == None or any(str(year) in filename for year in years):
        with open(PROJECT + BUGS_FOLDER + filename) as json_bugs:
            try:
                bugs = json.load(json_bugs)
            except:
                print('\nFailed to load json file:', filename)

        # update the bar
        counter += 1
        while last_total_int < (progressbar_width*(counter/len(os.listdir(PROJECT + BUGS_FOLDER)))):
            if last_total_int < progressbar_width:
                sys.stdout.write("#")
                sys.stdout.flush()
            last_total_int += 1
print("\nDone\n")


successful = True
num_bugs = 0

# Start insertion of bugs in database
print("Starting insertion for project '" + COLLECTION + "' in database...")

# setup progressbar
counter = 1
last_total_int = 0
print_progressbar()

already_inserted_bugs = []

# for each json file for each month add bugs into database
for filename in sorted(os.listdir(PROJECT + BUGS_FOLDER)):
    if START == None or any(str(year) in filename for year in years):
        with open(PROJECT + BUGS_FOLDER + filename) as json_bugs:
            #print(filename)
            try:
                bugs = json.load(json_bugs)
            except:
                print('\nFailed to load json file:', filename)
                try:
                    bugs = json.load(json_bugs)
                    print("Retrying for:", filename,  "Success!")
                    print_progressbar()
                except:
                    print("Retrying for:", filename,  "Error!")
                    print_progressbar()
                    continue
            for bug in bugs['bugs']:
                try:
                    if not 'cve-id' in bug.keys() or bug['cve-id'] == "None":
                        bug['cve-id'] = None
                    if not bug['id'] in already_inserted_bugs:
                        collection.insert_one(bug)
                        num_bugs += 1
                        already_inserted_bugs.append(bug['id'])
                except:
                    try:
                        print("\nError! Failed to insert bug '" + str(bug['id']) + "' in file " + filename)
                    except:
                        print("\nError! Failed to insert bug in file " + filename)
                    successful = False
                    try:
                        print("Try again with removement of comments...", end=" ", flush=True)
                        if not 'cve-id' in bug.keys() or bug['cve-id'] == "None":
                            bug['cve-id'] = None
                        bug['comments'] = None
                        if not bug['id'] in already_inserted_bugs:
                            collection.insert_one(bug)
                            num_bugs += 1
                            already_inserted_bugs.append(bug['id'])
                        print("Success\n")
                        print_progressbar()
                    except:
                        print("Error! Failed again to insert bug \n" + str(bug) + " in file " + filename)
                        print_progressbar()

    # Optional remove json file
    if DELETE_JSON:
        os.remove(PROJECT + BUGS_FOLDER + filename)
    
    # update the bar
    counter += 1
    while last_total_int < (progressbar_width*(counter/len(os.listdir(PROJECT + BUGS_FOLDER)))):
        if last_total_int < progressbar_width:
            sys.stdout.write("#")
            sys.stdout.flush()
        last_total_int += 1

if successful:
    print("\nSuccessfully inserted all bugs into the database!")
else:
    print("\nCould not successfully insert all bugs!")

print("Number of bugs in json files: " + str(num_bugs))
print("Number of bugs inserted into mongodb: " + str(collection.count_documents({})))
print("")
client.close()
