#!/usr/bin/env python
# coding: utf-8

# In[1]:


"""
Filter the bugs out of rep2bugs having (not) a reference to a cve (cve2bugs)
"""
import json


# In[2]:


# 1. Mozilla core/firefox
with open("rep2bugs-core-firefox.json") as jf:
    rep2bugs = json.load(jf)
with open("../CVE_2_Bug/cve2bugs-core-firefox.json") as jf:
    cve2bugs = json.load(jf)

rep2cve_bugs = dict()
rep2non_cve_bugs = dict()
    
for rep in rep2bugs.keys():
    rep2cve_bugs[rep] = []
    rep2non_cve_bugs[rep] = []
    for bug in rep2bugs[rep]:
        found = False
        for cve in cve2bugs.keys():
            if str(bug) in cve2bugs[cve]:
                rep2cve_bugs[rep].append(bug)
                found = True
                break
        if not found:
            rep2non_cve_bugs[rep].append(bug)


# In[3]:


with open("rep2cve-bugs-core-firefox.json", "w") as jf:
    json.dump(rep2cve_bugs, jf)
with open("rep2non-cve-bugs-core-firefox.json", "w") as jf:
    json.dump(rep2non_cve_bugs, jf)

print("Number of reporters creating at least one bug assigned to a cve:", 
      sum(map(lambda rep : len(rep2cve_bugs[rep]) > 0, rep2cve_bugs.keys())))
print("Number of reporters creating at least one bug not assigned to a cve:", 
      sum(map(lambda rep : len(rep2non_cve_bugs[rep]) > 0, rep2non_cve_bugs.keys())))


# In[4]:


# 2. Thunderbird
with open("rep2bugs-thunderbird.json") as jf:
    rep2bugs = json.load(jf)
with open("../CVE_2_Bug/cve2bugs-thunderbird.json") as jf:
    cve2bugs = json.load(jf)

rep2cve_bugs = dict()
rep2non_cve_bugs = dict()
    
for rep in rep2bugs.keys():
    rep2cve_bugs[rep] = []
    rep2non_cve_bugs[rep] = []
    for bug in rep2bugs[rep]:
        found = False
        for cve in cve2bugs.keys():
            if str(bug) in cve2bugs[cve]:
                rep2cve_bugs[rep].append(bug)
                found = True
                break
        if not found:
            rep2non_cve_bugs[rep].append(bug)


# In[5]:


with open("rep2cve-bugs-thunderbird.json", "w") as jf:
    json.dump(rep2cve_bugs, jf)
with open("rep2non-cve-bugs-thunderbird.json", "w") as jf:
    json.dump(rep2non_cve_bugs, jf)

print("Number of reporters creating at least one bug assigned to a cve:", 
      sum(map(lambda rep : len(rep2cve_bugs[rep]) > 0, rep2cve_bugs.keys())))
print("Number of reporters creating at least one bug not assigned to a cve:", 
      sum(map(lambda rep : len(rep2non_cve_bugs[rep]) > 0, rep2non_cve_bugs.keys())))


# In[6]:


# 3. Apache http server
with open("rep2bugs-apache.json") as jf:
    rep2bugs = json.load(jf)
with open("../CVE_2_Bug/cve2bugs-apache.json") as jf:
    cve2bugs = json.load(jf)

rep2cve_bugs = dict()
rep2non_cve_bugs = dict()
    
for rep in rep2bugs.keys():
    rep2cve_bugs[rep] = []
    rep2non_cve_bugs[rep] = []
    for bug in rep2bugs[rep]:
        found = False
        for cve in cve2bugs.keys():
            if str(bug) in cve2bugs[cve]:
                rep2cve_bugs[rep].append(bug)
                found = True
                break
        if not found:
            rep2non_cve_bugs[rep].append(bug)


# In[7]:


with open("rep2cve-bugs-apache.json", "w") as jf:
    json.dump(rep2cve_bugs, jf)
with open("rep2non-cve-bugs-apache.json", "w") as jf:
    json.dump(rep2non_cve_bugs, jf)

print("Number of reporters creating at least one bug assigned to a cve:", 
      sum(map(lambda rep : len(rep2cve_bugs[rep]) > 0, rep2cve_bugs.keys())))
print("Number of reporters creating at least one bug not assigned to a cve:", 
      sum(map(lambda rep : len(rep2non_cve_bugs[rep]) > 0, rep2non_cve_bugs.keys())))


# In[8]:


# 4. Linux
with open("rep2bugs-linux.json") as jf:
    rep2bugs = json.load(jf)
with open("../CVE_2_Bug/cve2bugs-linux.json") as jf:
    cve2bugs = json.load(jf)

rep2cve_bugs = dict()
rep2non_cve_bugs = dict()
    
for rep in rep2bugs.keys():
    rep2cve_bugs[rep] = []
    rep2non_cve_bugs[rep] = []
    for bug in rep2bugs[rep]:
        found = False
        for cve in cve2bugs.keys():
            if str(bug) in cve2bugs[cve]:
                rep2cve_bugs[rep].append(bug)
                found = True
                break
        if not found:
            rep2non_cve_bugs[rep].append(bug)


# In[9]:


with open("rep2cve-bugs-linux.json", "w") as jf:
    json.dump(rep2cve_bugs, jf)
with open("rep2non-cve-bugs-linux.json", "w") as jf:
    json.dump(rep2non_cve_bugs, jf)

print("Number of reporters creating at least one bug assigned to a cve:", 
      sum(map(lambda rep : len(rep2cve_bugs[rep]) > 0, rep2cve_bugs.keys())))
print("Number of reporters creating at least one bug not assigned to a cve:", 
      sum(map(lambda rep : len(rep2non_cve_bugs[rep]) > 0, rep2non_cve_bugs.keys())))


# In[2]:


# 5. PHP
with open("rep2bugs-php.json") as jf:
    rep2bugs = json.load(jf)
with open("../CVE_2_Bug/cve2bugs-php.json") as jf:
    cve2bugs = json.load(jf)

rep2cve_bugs = dict()
rep2non_cve_bugs = dict()
    
for rep in rep2bugs.keys():
    rep2cve_bugs[rep] = []
    rep2non_cve_bugs[rep] = []
    for bug in rep2bugs[rep]:
        found = False
        for cve in cve2bugs.keys():
            if str(bug) in cve2bugs[cve]:
                rep2cve_bugs[rep].append(bug)
                found = True
                break
        if not found:
            rep2non_cve_bugs[rep].append(bug)


# In[3]:


with open("rep2cve-bugs-php.json", "w") as jf:
    json.dump(rep2cve_bugs, jf)
with open("rep2non-cve-bugs-php.json", "w") as jf:
    json.dump(rep2non_cve_bugs, jf)

print("Number of reporters creating at least one bug assigned to a cve:", 
      sum(map(lambda rep : len(rep2cve_bugs[rep]) > 0, rep2cve_bugs.keys())))
print("Number of reporters creating at least one bug not assigned to a cve:", 
      sum(map(lambda rep : len(rep2non_cve_bugs[rep]) > 0, rep2non_cve_bugs.keys())))


# In[ ]:




