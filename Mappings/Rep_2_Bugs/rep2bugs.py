#!/usr/bin/env python
# coding: utf-8

# In[1]:


from pymongo import MongoClient
import xml.etree.ElementTree as ET
import utils, json, sys


# In[ ]:


root = ET.parse("./../../config.xml")

DB = root.find("mongodb").find("db").text

client = MongoClient()
db = client[DB]


# In[ ]:


try:
    reporters = utils.load_reporters()
    print("Example reporter:", list(reporters.keys())[0])
except:
    print("Could not load reporters!")


# In[8]:


# 1. Core/Firefox
COLLECTION_1 = root.find("projects").find('.//product[@name=\'mozilla-core\']').find("collection").text
COLLECTION_2 = root.find("projects").find('.//product[@name=\'firefox\']').find("collection").text
collection_project_1 = db[COLLECTION_1]
collection_project_2 = db[COLLECTION_2]

rep2bugs_firefox = dict()

mapping_counter_1 = utils.rep2bugs_bugzilla(rep2bugs_firefox, collection_project_1, reporters)
mapping_counter_2 = utils.rep2bugs_bugzilla(rep2bugs_firefox, collection_project_2, reporters)


# In[9]:


with open("rep2bugs-core-firefox.json", "w") as jf:
    json.dump(rep2bugs_firefox, jf)
    
print("Counter core:", mapping_counter_1)
print("Counter firefox:", mapping_counter_2)
print("Number of reporters creating at least one bug:", 
      sum(map(lambda rep : len(rep2bugs_firefox[rep]) > 0, rep2bugs_firefox.keys())))


# In[10]:


# 2. Thunderbird
COLLECTION = root.find("projects").find('.//product[@name=\'thunderbird\']').find("collection").text
collection_project = db[COLLECTION]

rep2bugs_thunderbird = dict()

mapping_counter = utils.rep2bugs_bugzilla(rep2bugs_thunderbird, collection_project, reporters)


# In[11]:


with open("rep2bugs-thunderbird.json", "w") as jf:
    json.dump(rep2bugs_thunderbird, jf)
    
print("Counter thunderbird:", mapping_counter)
print("Number of reporters creating at least one bug:", 
      sum(map(lambda rep : len(rep2bugs_thunderbird[rep]) > 0, rep2bugs_thunderbird.keys())))


# In[12]:


# 3. Apache http-server
COLLECTION = root.find("projects").find('.//product[@name=\'apache\']').find("collection").text
collection_project = db[COLLECTION]

rep2bugs_apache = dict()

mapping_counter = utils.rep2bugs_bugzilla(rep2bugs_apache, collection_project, reporters)


# In[13]:


with open("rep2bugs-apache.json", "w") as jf:
    json.dump(rep2bugs_apache, jf)
    
print("Counter apache:", mapping_counter)
print("Number of reporters creating at least one bug:", 
      sum(map(lambda rep : len(rep2bugs_apache[rep]) > 0, rep2bugs_apache.keys())))


# In[4]:


# 4. Linux Kernel
COLLECTION = root.find("projects").find('.//product[@name=\'linux\']').find("collection").text
collection_project = db[COLLECTION]

rep2bugs_linux = dict()

mapping_counter = utils.rep2bugs_bugzilla(rep2bugs_linux, collection_project, reporters)


# In[5]:


with open("rep2bugs-linux.json", "w") as jf:
    json.dump(rep2bugs_linux, jf)
    
print("Counter linux:", mapping_counter)
print("Number of reporters creating at least one bug:", 
      sum(map(lambda rep : len(rep2bugs_linux[rep]) > 0, rep2bugs_linux.keys())))


# In[4]:


# 5. PHP
COLLECTION = root.find("projects").find('.//product[@name=\'php\']').find("collection").text
collection_project = db[COLLECTION]

rep2bugs_php = dict()

mapping_counter = utils.rep2bugs_php(rep2bugs_php, collection_project, reporters)


# In[5]:


with open("rep2bugs-php.json", "w") as jf:
    json.dump(rep2bugs_php, jf)
    
print("Counter php:", mapping_counter)
print("Number of reporters creating at least one bug:", 
      sum(map(lambda rep : len(rep2bugs_php[rep]) > 0, rep2bugs_php.keys())))


# In[ ]:




