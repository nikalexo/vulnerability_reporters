import re

# Prints info of bug2commits to see changes
def print_changes(cve2commits, updates=None, new_inserted_cves=None):
    number_cves_with_bugs = 0
    for cve_id in cve2commits.keys():
        if cve2commits[cve_id] != []:
            number_cves_with_bugs += 1
        #else:
        #    print(cve_id)
    print("Number of cves with at least one commit:", number_cves_with_bugs)
    print("Number of cves with no commit:", (len(cve2commits) - number_cves_with_bugs))
    if updates != None:
        print("Number of new insertions:", updates)
    if new_inserted_cves != None:
        print("Number of new inserted cves:", new_inserted_cves)

# Adds commit to cve in dictionary cve2commits
def add_commit_to_cve(cve2commits, cve_id, commit=None, insert_new_cves=True):
    if insert_new_cves:
        if not cve_id in cve2commits.keys(): 
            cve2commits[cve_id] = []
        if not str(commit) in cve2commits[cve_id]:
            # print(commit, cve_id)
            if commit != None:
                cve2commits[cve_id].append(str(commit))
                return 1
            return 0
        return 0
    else:
        if cve_id in cve2commits.keys(): 
            if not str(commit) in cve2commits[cve_id]:
                # print(commit, cve_id)
                if commit != None:
                    cve2commits[cve_id].append(str(commit))
                    return 1
                return 0
        return 0

# Extracts all mentioned CVEs in a string
def extract_cve_id_from_string(cve2commits, text, commit, insert_new_cves=True):
    occurrences = [m.start() for m in re.finditer('CVE-', text)]
    for pos in occurrences:
        substring = text[pos:pos+20]
        cve_id = "CVE-"
        for c in substring[4:]: 
            if c == "-" or c.isdigit():
                cve_id += c
            else:
                break
        if len(cve_id) > 9:
            return add_commit_to_cve(cve2commits, cve_id, commit, insert_new_cves)
    return 0

# Extracts all cve in collection of commits
def extract_cves_commits(cve2commits, commits, insert_new_cves=True):
    updates = 0
    for commit in commits:
        try:
            message = commit.message
            updates += extract_cve_id_from_string(cve2commits, message, commit.hexsha, insert_new_cves)
        except:
            print("Error")
    return updates

# Extract fixing commits in references of cve based on regular expresssions
def extract_commits_cve_refernces(cve2commits, cve_list, exprs, insert_new_cves=True):
    updates = 0
    for expr in exprs:
        to_search = expr
        if to_search[0] == "(":
            to_search = to_search[1:-1]
        for cve in cve_list:
            if cve['references'] != None:
                for ref in cve['references']:
                    m = re.search(to_search, ref)
                    if m != None:
                        commit = m.group(0)[-40:]
                        updates += add_commit_to_cve(cve2commits, cve['id'], commit, insert_new_cves)
    return updates

# Prints cves that do not have a found fixing commit
def print_cves_with_no_commit(cve2commit):
    count = 0
    for cve_id in cve2commit.keys():
        if cve2commit[str(cve_id)] == []:
            print(cve_id)
            count += 1
    print("Total:", count)

# Maps from cve to bugs and bug to commits to cve to commits
def cve_bug_commit(cve2bugs, bug2commits, cve2commits):
    for cve in cve2bugs.keys():
        cve2commits[cve] = []    # Add all cves to cve2commits
        for bug in cve2bugs[cve]:
            if bug in bug2commits.keys():
                cve2commits[cve].extend(bug2commits[bug])
