#!/usr/bin/env python
# coding: utf-8

# In[14]:


import os
import re
import sys
import json
from git import Repo
from pymongo import MongoClient
import xml.etree.ElementTree as ET
import utils


# In[15]:


# insert at 1, 0 is the script path (or '' in REPL)
sys.path.insert(1, '../../../cve-search/')

import lib.DatabaseLayer as db


# In[16]:


root = ET.parse("./../../config.xml")
client = MongoClient()

DB = root.find("mongodb").find("db").text

path_cve2bugs = "./../CVE_2_Bug/cve2bugs-core-firefox.json"
path_bug2commits = "./../Bug_2_Commit/bug2commits-core-firefox.json"

REG_EXPRS = root.find("projects").find('.//product[@name=\'firefox\']').find("reg_exprs_bug_comment_1").text.split("\n")

REPO = "../../../gecko-dev"


# In[17]:


cve2commits = dict()


# In[18]:


# 1. CVE -> Bug -> Commit
print("Map cves to commits by cve to bug and bug to commit...")
with open(path_cve2bugs) as jf:
    cve2bugs = json.load(jf)
with open(path_bug2commits) as jf:
    bug2commits = json.load(jf)

utils.cve_bug_commit(cve2bugs, bug2commits, cve2commits)


# In[19]:


utils.print_changes(cve2commits, None)


# In[20]:


# 2. Check commit messages in gecko-dev repo
print("Check commit messages in gecko-dev repo for cves...")
repo = Repo(REPO)
commits = list(repo.iter_commits('master', max_count=1000000))

updates = utils.extract_cves_commits(cve2commits, commits, False)


# In[21]:


utils.print_changes(cve2commits, updates)


# In[22]:


# 3. Extract references to commit in cves using cve-search
print("Extract references to commit in cves using cve-search...")

# load all cves which are relevant for the project
with open("./../Project_2_CVE/project2cves.json") as jf:
    project2cves = json.load(jf)
    cves = project2cves["firefox"]
print("Number of found cves in cve-search:", len(cves))

# load all cves with content
db_cves = client["cvedb"]
coll_cves = db_cves.cves
cve2bugs = dict()
cve_list = []
for cve in cves:
    cve2bugs[cve] = []
    full_cve = coll_cves.find_one({'id':cve})
    if full_cve != None:
        cve_list.append(full_cve)

print("Number of found cves in cve-search:", len(cve_list))
updates = utils.extract_commits_cve_refernces(cve2commits, cve_list, REG_EXPRS, False)


# In[23]:


utils.print_changes(cve2commits, updates)


# In[24]:


with open('cve2commits-core-firefox.json', 'w') as fp:
    json.dump(cve2commits, fp)


# In[ ]:




