#!/usr/bin/env python
# coding: utf-8

# In[1]:


import json
import sys
import os
import re
from git import Repo
from pymongo import MongoClient
import xml.etree.ElementTree as ET
import utils


# In[2]:


# insert at 1, 0 is the script path (or '' in REPL)
sys.path.insert(1, '../../../cve-search/')

import lib.DatabaseLayer as db


# In[3]:


root = ET.parse("./../../config.xml")

DB = root.find("mongodb").find("db").text
COLLECTION = root.find("projects").find('.//product[@name=\'apache\']').find("collection").text

URLS = root.find("projects").find('.//product[@name=\'apache\']').find("bugs").find("base_url").text.split("\n")
REG_EXPRS = root.find("projects").find('.//product[@name=\'apache\']').find("reg_exprs_bug_commit").text.split("\n")

REPO = "../../../httpd"


# In[4]:


# load bug collection of project from mongodb database
client = MongoClient()
db1 = client[DB]
collection = db1[COLLECTION]

bug = collection.find_one({})

if bug != None:
    print("Example bug:", bug['id'])
else:
    sys.exit("No bugs in database collection!")


# In[5]:


# load all cves which are relevant for the project
with open("./../Project_2_CVE/project2cves.json") as jf:
    project2cves = json.load(jf)
    cves = project2cves["apache"]
print("Number of found cves in cve-search:", len(cves))


# In[11]:


db_cves = client["cvedb"]
coll_cves = db_cves.cves
cve2bugs = dict()
cve_list = []
for cve in cves:
    cve2bugs[cve] = []
    full_cve = coll_cves.find_one({'id':cve})
    if full_cve != None:
        cve_list.append(full_cve)
print("Number of found cves in cve-search:", len(cve_list))


# In[12]:


# 1. Extract bug-ids from cve references
print("Extract bug-ids from cve references...")
utils.get_bugs_from_refs(URLS, cve_list, cve2bugs)


# In[13]:


utils.print_changes(cve2bugs, None)


# In[15]:


# 2. Extract CVE id from available fields of bugs in database (e.g. description)
print("Extract CVE-id from available fields of bugs in database (e.g. description)...")
updates = utils.get_cves_from_database_fields(collection, cve2bugs)


# In[16]:


utils.print_changes(cve2bugs, updates)


# In[17]:


# 3. Check commit messages in httpd repo
print("Check commit messages in httpd repo for cves and bugs...")
repo = Repo(REPO)
commits = list(repo.iter_commits('trunk', max_count=1000000))

updates = 0
for expr in REG_EXPRS:
    updates += utils.extract_bugs_commits(cve2bugs, commits, expr)


# In[18]:


utils.print_changes(cve2bugs, updates)


# In[19]:


# print cves with no bug
# print("CVEs with no found bug:")
# utils.print_cves_with_no_bug(cve2bugs)


# In[20]:


client.close()


# In[21]:


with open('cve2bugs-apache.json', 'w') as fp:
    json.dump(cve2bugs, fp)


# In[ ]:




