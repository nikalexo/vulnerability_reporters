#!/usr/bin/env python
# coding: utf-8

# In[1]:


import json
import sys
import time
import requests
import html5lib
import re
import os
from pymongo import MongoClient
from bs4 import BeautifulSoup
from bs4 import NavigableString


# In[2]:


# insert at 1, 0 is the script path (or '' in REPL)
sys.path.insert(1, '../../../cve-search/')

import lib.DatabaseLayer as db


# In[3]:


project2cves = dict()

client = MongoClient()
db1 = client.cvedb
collection1 = db1.cves


# In[4]:


def bs_preprocess(html):
    """remove distracting whitespaces and newline characters"""
    pat = re.compile('(^[\s]+)|([\s]+$)', re.MULTILINE)
    html = re.sub(pat, '', html)       # remove leading and trailing whitespaces
    html = re.sub('\n', ' ', html)     # convert newlines to spaces
                                        # this preserves newline delimiters
    html = re.sub('[\s]+<', '<', html) # remove whitespaces before opening tags
    html = re.sub('>[\s]+', '>', html) # remove whitespaces after closing tags
    return html


# In[5]:


def get_cves(pkg_name, pkg_cpe):
    
    cve_list1 = []
    cve_list2 = []
          
    # Only for kernel. Get CVEs from free text match but only if they are not for android.
    if 'Linux' in pkg_name:
        for item in db.getFreeText('"linux"'):
            android_ref=False
            for ref in item['references']:
                if re.match(r'.*android.*',ref):
                    android_ref = True
            if not android_ref:
                cve_list1.append(item)
    
    for item in db.cvesForCPE(pkg_cpe, vulnProdSearch=True)['results']:
        cve_list2.append(item)
    
    return (cve_list1, cve_list2)  


# In[6]:


def apache_special(cve_list_sec_adv, cve_list2):
    cve_list = []

    # Add the CVEs from the security advisories
    for cve in cve_list2:
        cve_list.append(cve['id'])
    for cve in cve_list_sec_adv:
        if cve not in cve_list:
            item = collection1.find_one({"id": cve})
            if item != None:
                cve_list.append(cve)
    
    return cve_list


# In[7]:


def parse_apache():
    apacheurls = ['https://httpd.apache.org/security/vulnerabilities_24.html', 'https://httpd.apache.org/security/vulnerabilities_22.html',
             'https://httpd.apache.org/security/vulnerabilities_20.html', 'https://httpd.apache.org/security/vulnerabilities_13.html']
    
    # First Download all html pages   
    html_text = []
    for URL in apacheurls:
        time.sleep(5)
        print('Trying URL: ',URL)
        temp = requests.get(URL)
        print('Reply: ',temp)
        html_text.append(temp)
    
    # Then parse them into a cve list
    cve_list = []
    
    for temp in html_text:
        try:
            soup = BeautifulSoup(bs_preprocess(temp.text),"html5lib")
            span = soup.find_all('name')
            for item in span:
                if re.match(r'.*CVE-.*',item['name']):
                    cve = item['name']
                    if cve not in cve_list:
                        cve_list.append(cve)
        except AttributeError:
            print('ERROR with URL', URL)
            continue
        
    print('APACHE Security Advisories: Extracted', len(cve_list), 'CVES.')
    
    return cve_list


# In[8]:


# Apache

pkg_name = 'Apache server'
pkg_cpe = 'apache:http_server'
(cve_list1, cve_list2) = get_cves(pkg_name, pkg_cpe)
print("Number of found cves in cve-search for apache http-server:", len(cve_list2))
cve_list_sec_adv = parse_apache()
cve_list = apache_special(cve_list_sec_adv, cve_list2)
print("Number of found cves apache http-server:", len(cve_list))

project2cves["apache"] = cve_list


# In[9]:


def mozilla_special(cve_list_sec_adv, cve_list2):    
    cve_list = []

    # Add the CVEs from the security advisories
    for cve in cve_list2:
        cve_list.append(cve['id'])
    for cve in cve_list_sec_adv:
        if cve not in cve_list:
            item = collection1.find_one({"id": cve})
            if item != None:
                cve_list.append(cve)
    
    return cve_list


# In[10]:


def parse_mfsa(keywords):
    # You need to have the github repo https://github.com/mozilla/foundation-security-advisories at this path
    file_path = '../../../foundation-security-advisories/announce/'
    
    # Traverse directories
    dirlist = [ item for item in os.listdir(file_path) if os.path.isdir(os.path.join(file_path, item)) ]
    
    mfsa = dict()
    
    # Store the mfsa text in a dictionary for ease of use
    
    for directory in dirlist:
        year = directory
        filelist = [ item for item in os.listdir(file_path+directory+'/') if os.path.isfile(os.path.join(file_path+directory+'/', item)) ]
        for file in filelist:
            mfsa_id  = os.path.splitext(file)[0]
            with open(file_path+directory+'/'+file, "r") as fp:
                mfsa[mfsa_id] = fp.read()
                
    mfsa_data = dict()
    cve_list = []
    
    for report in mfsa:
        text = mfsa[report]
        text_line = text.replace("\n", "-----")
        products = re.search(r'(?<=fixed_in:-----).*?-----',text_line).group(0)
        if any(kw in products for kw in keywords) or keywords == []:
            cve = re.search(r'CVE-\d{4}-\d{4,}',text)
            if cve != None:
                cve_id = cve.group(0)
                if cve_id not in cve_list:
                    cve_list.append(cve_id)
    
    print('MFSA: Extracted ', len(cve_list),' CVEs.')
    
    return cve_list


# In[11]:


# Core/Firefox

pkg_name = 'Mozilla'
pkg_cpes = ['mozilla:firefox', 'mozilla:mozilla', 'mozilla:mozilla_firefox', 
            'mozilla:mozilla_suite', 'mozilla:firefox_esr', 'mozilla:firefox_mobil', 
            'mozilla:gecko']
cve_list_cpe = []
for cpe in pkg_cpes:
    (cve_list1, cve_list2) = get_cves(pkg_name, cpe)
    for cve in cve_list2:
        if cve not in cve_list_cpe:
            cve_list_cpe.append(cve)
print("Number of found cves in cve-search for mozilla firefox:", len(cve_list_cpe))
cve_list_sec_adv = parse_mfsa(["Firefox", "Mozilla Suite", "Seamonkey"])
cve_list = mozilla_special(cve_list_sec_adv, cve_list_cpe)
print("Number of found cves mozilla firefox:", len(cve_list))

project2cves["firefox"] = cve_list

mozilla_list = cve_list


# In[12]:


# Thunderbird

pkg_name = 'Mozilla'
pkg_cpes = ['mozilla:thunderbird', 'mozilla:thunderbird_esr']
cve_list_cpe = []
for cpe in pkg_cpes:
    (cve_list1, cve_list2) = get_cves(pkg_name, cpe)
    for cve in cve_list2:
        if cve not in cve_list_cpe:
            cve_list_cpe.append(cve)
print("Number of found cves in cve-search for mozilla thunderbird:", len(cve_list_cpe))
cve_list_sec_adv = parse_mfsa(["Thunderbird"])
cve_list = mozilla_special(cve_list_sec_adv, cve_list_cpe)
print("Number of found cves mozilla thunderbird:", len(cve_list))

project2cves["thunderbird"] = cve_list

for cve in cve_list:
    if cve not in mozilla_list:
        mozilla_list.append(cve)


# In[13]:


# Mozilla suite (Firefox + Thunderbird + Mozilla Suite)
print("Number of found cves mozilla suite:", len(mozilla_list))
project2cves["mozilla-suite"] = mozilla_list


# In[14]:


# Mozilla complete (e.g. also seamonkey or bugzilla)

pkg_name = 'Mozilla'
pkg_cpe = 'mozilla:'
(cve_list1, cve_list2) = get_cves(pkg_name, pkg_cpe)
print("Number of found cves in cve-search for mozilla:", len(cve_list2))
cve_list_sec_adv = parse_mfsa([])
cve_list = mozilla_special(cve_list_sec_adv, cve_list2)
print("Number of found cves mozilla:", len(cve_list))

project2cves["mozilla-all"] = cve_list


# In[15]:


def kernel_special(cve_list1, cve_list2):
    # There are some mistakes in the CVE data of the NVD. Specifically, in some CVEs, the os cpe in AND expressions are wrongly designated as vulnerable.
    cve_list = []
    for item in cve_list2:
        vc = item['vulnerable_product']
        flag_app = False
        flag_os = False
        for p in vc:
            if re.match(r'.*:a:.*', p):
                flag_app = True
            elif re.match(r'.*:o:.*', p):
                flag_os = True
        if flag_app and flag_os:
            torvalds_ref = False
            for ref in item['references']:
                if re.match(r'(.*torvalds.*)|(.*git.kernel.*)|(.*linux.*)', ref):
                    torvalds_ref = True
                    break
            # If there is a reference to a git kernel fix then it is surely a kernel vulnerability
        if flag_app and flag_os and (not torvalds_ref):
            pass
            #print(item['id'])
        else:
            cve_list.append(item['id'])
    for item in cve_list1:
        if item not in cve_list2:
            git_ref = False
            for ref in item['references']:
                if re.match(r'(.*torvalds/linux.*)|(.*git.kernel.*)',ref):
                    git_ref = True
            if git_ref:
                cve_list.append(item['id'])
    
    return cve_list


# In[16]:


# Linux

pkg_name = 'Linux kernel'
pkg_cpe = 'linux:linux_kernel'
(cve_list1, cve_list2) = get_cves(pkg_name, pkg_cpe)
cve_list = kernel_special(cve_list1, cve_list2)
print("Number of found cves linux:", len(cve_list))

project2cves["linux"] = cve_list


# In[17]:


# PHP
pkg_name = 'PHP'
pkg_cpe_1 = 'php:php'
(cve_list1, cve_list2) = get_cves(pkg_name, pkg_cpe_1)
cve_list = []
for item in cve_list2:
    if item['id'] not in cve_list:
        cve_list.append(item['id'])
print("Number of found cves php:", len(cve_list))

project2cves["php"] = cve_list


# In[18]:


with open("project2cves.json", "w") as jf:
    json.dump(project2cves, jf)


# In[ ]:




