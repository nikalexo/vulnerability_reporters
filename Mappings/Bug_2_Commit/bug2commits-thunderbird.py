#!/usr/bin/env python
# coding: utf-8

# In[1]:


from git import Repo
import json
import re
from pymongo import MongoClient
import xml.etree.ElementTree as ET
import utils
import os


# In[7]:


root = ET.parse("./../../config.xml")

DB = root.find("mongodb").find("db").text
COLLECTION = root.find("projects").find('.//product[@name=\'thunderbird\']').find("collection").text

REG_EXPRS_COMMIT = root.find("projects").find('.//product[@name=\'thunderbird\']').find("reg_exprs_bug_commit").text.split("\n")
REG_EXPRS_COMMENT_1 = root.find("projects").find('.//product[@name=\'thunderbird\']').find("reg_exprs_bug_comment_1").text.split("\n")
REG_EXPRS_COMMENT_2 = root.find("projects").find('.//product[@name=\'thunderbird\']').find("reg_exprs_bug_comment_2").text.split("\n")
REPO_1 = "./../../../releases-comm-central"
REPO_2 = "./../../../gecko-dev"

BUG_LIST_PATH = "./bugs-thunderbird.list"


# In[3]:


client = MongoClient()
db = client[DB]
collection = db[COLLECTION]

bug = collection.find_one({})

if bug != None:
    print("Example bug:", bug['id'])
else:
    sys.exit("No bugs in database collection!")


# In[4]:


bug2commits = dict()
bug2date = dict()


# In[5]:


repo_1 = Repo(REPO_1)
commits_1 = list(repo_1.iter_commits('master', max_count=1000000))
repo_2 = Repo(REPO_2)
commits_2 = list(repo_2.iter_commits('master', max_count=1000000))


# In[6]:


# 0. Add all bug ids of bug tracking system to dict
if not os.path.exists(BUG_LIST_PATH):
    utils.add_bugs_to_dict(bug2commits, collection)
    
    # write bug list into file for fast bug-id loading
    with open(BUG_LIST_PATH, "w") as f:
        for bug in bug2commits.keys():
            f.write(str(bug) + "\n")
else:
    # fast loading of bug-ids (only possible if bugs-[...].list already available)
    with open(BUG_LIST_PATH, "r") as f:
        lines = f.readlines()
        for bug in lines:
            bug2commits[bug[:-1]] = []
    # check if number of bugs in file is equal to the number in the database
    if len(bug2commits.keys()) != collection.count_documents({}):
        bug2commits = dict()
        utils.add_bugs_to_dict(bug2commits, collection)
        with open(BUG_LIST_PATH, "w") as f:
            for bug in bug2commits.keys():
                f.write(str(bug) + "\n")
            
utils.add_date_to_bug(bug2date, collection)
print("Number of bugs in bug2commits: " + str(len(bug2commits.keys())))
print("Number of bugs in database: " + str(collection.count_documents({})))


# In[7]:


# 1.1. check commit messages in releases-comm-central repo
updates = 0
for expr in REG_EXPRS_COMMIT:
    print("Current regular expression: " + expr)
    if "bugzilla.mozilla.org" in expr:
        updates += utils.extract_bugs_commits(bug2commits, bug2date, commits_1, expr)
    else:
        # Min time difference between commit and bug creation time or last modification time has to be < 700 days
        updates += utils.extract_bugs_commits(bug2commits, bug2date, commits_1, expr) #, True, 700)


# In[8]:


utils.print_changes(bug2commits, updates)


# In[9]:


# 1.2. check commit messages in gecko-dev repo
updates = 0
for expr in REG_EXPRS_COMMIT:
    print("Current regular expression: " + expr)
    if "bugzilla.mozilla.org" in expr:
        updates += utils.extract_bugs_commits(bug2commits, bug2date, commits_2, expr)
    else:
        # Min time difference between commit and bug creation time or last modification time has to be < 700 days
        updates += utils.extract_bugs_commits(bug2commits, bug2date, commits_2, expr) #, True, 700)


# In[10]:


utils.print_changes(bug2commits, updates)


# In[11]:


# 2. check comments in bugs for custom urls like github
for expr in REG_EXPRS_COMMENT_1:
    print("Current regular expression: " + expr)
    updates = utils.parse_comments(bug2commits, collection, expr, True)


# In[12]:


utils.print_changes(bug2commits, updates)


# In[13]:


# 3. check comments for mercurial commit hashes
with open("extra_thunderbird.json") as jf:
    bug2commits_temp = json.load(jf)
updates = utils.insert_extra(bug2commits, bug2commits_temp)


# In[14]:


utils.print_changes(bug2commits, updates)


# In[15]:


client.close()
with open('bug2commits-thunderbird.json', 'w') as fp:
    json.dump(bug2commits, fp)


# In[ ]:




