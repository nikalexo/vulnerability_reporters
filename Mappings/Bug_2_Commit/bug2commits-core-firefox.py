#!/usr/bin/env python
# coding: utf-8

# In[1]:


from git import Repo
import json
import re
import sys
from pymongo import MongoClient
import xml.etree.ElementTree as ET
import utils
import os


# In[2]:


root = ET.parse("./../../config.xml")

DB = root.find("mongodb").find("db").text
COLLECTION_1 = root.find("projects").find('.//product[@name=\'mozilla-core\']').find("collection").text
COLLECTION_2 = root.find("projects").find('.//product[@name=\'firefox\']').find("collection").text

REG_EXPRS_COMMIT = root.find("projects").find('.//product[@name=\'firefox\']').find("reg_exprs_bug_commit").text.split("\n")
REG_EXPRS_COMMENT_1 = root.find("projects").find('.//product[@name=\'firefox\']').find("reg_exprs_bug_comment_1").text.split("\n")
REG_EXPRS_COMMENT_2 = root.find("projects").find('.//product[@name=\'firefox\']').find("reg_exprs_bug_comment_2").text.split("\n")

REPO = "./../../../gecko-dev"

BUG_LIST_PATH = "./bugs-core-firefox.list"


# In[3]:


client = MongoClient()
db = client[DB]
collection_1 = db[COLLECTION_1]
collection_2 = db[COLLECTION_2]

bug_1 = collection_1.find_one()
bug_2 = collection_2.find_one()

if bug_1 != None:
    print("Example bug core:", bug_1['id'])
else:
    sys.exit("No bugs in database collection for component core!")
if bug_2 != None:
    print("Example bug firefox:", bug_2['id'])
else:
    sys.exit("No bugs in database collection for firefox!")


# In[4]:


bug2commits = dict()
bug2date = dict()


# In[5]:


repo = Repo(REPO)
commits = list(repo.iter_commits('master', max_count=1000000))


# In[ ]:


# 0. Add all bug ids of bug tracking system to dict
utils.add_bugs_to_dict(bug2commits, collection_1)
utils.add_bugs_to_dict(bug2commits, collection_2)

#utils.add_date_to_bug(bug2date, collection_1)
#utils.add_date_to_bug(bug2date, collection_2)
print("Number of bugs in bug2commits: " + str(len(bug2commits.keys())))
print("Number of bugs in database: " + str(collection_1.count_documents({}) + collection_2.count_documents({})))


# In[15]:


# 1. check commit messages in gecko-dev repo
updates = 0
for expr in REG_EXPRS_COMMIT:
    print("Current regular expression: " + expr)
    if "bugzilla.mozilla.org" in expr:
        updates += utils.extract_bugs_commits(bug2commits, bug2date, commits, expr)
    else:
        # Min time difference between commit and bug creation time or last modification time has to be < 700 days
        updates += utils.extract_bugs_commits(bug2commits, bug2date, commits, expr)#, True, 700)


# In[16]:


utils.print_changes(bug2commits, updates)


# In[17]:


# 2.1. check comments in bugs for custom urls like github - collection_1
for expr in REG_EXPRS_COMMENT_1:
    print("Current regular expression: " + expr)
    updates = utils.parse_comments(bug2commits, collection_1, expr, True)


# In[18]:


utils.print_changes(bug2commits, updates)


# In[ ]:


# 2.2. check comments in bugs for custom urls like github - collection_2
for expr in REG_EXPRS_COMMENT_1:
    print("Current regular expression: " + expr)
    updates = utils.parse_comments(bug2commits, collection_2, expr, True)


# In[ ]:


utils.print_changes(bug2commits, updates)


# In[ ]:


# 3. check comments for mercurial commit hashes
with open("extra_core-firefox.json") as jf:
    bug2commits_temp = json.load(jf)
updates = utils.insert_extra(bug2commits, bug2commits_temp)


# In[ ]:


utils.print_changes(bug2commits, updates)


# In[ ]:


# 4. check url field in bugs - TODO


# In[ ]:


client.close()
with open('bug2commits-core-firefox.json', 'w') as fp:
    json.dump(bug2commits, fp)

