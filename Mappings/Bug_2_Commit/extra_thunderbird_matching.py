import utils
from git import Repo
import json, os
from pymongo import MongoClient
import hglib
import xml.etree.ElementTree as ET

root = ET.parse("./../../config.xml")

DB = root.find("mongodb").find("db").text
COLLECTION = root.find("projects").find('.//product[@name=\'thunderbird\']').find("collection").text

REPO_GIT_1 = "./../../../releases-comm-central"
REPO_GIT_2 = "./../../../gecko-dev"

REPO_MER_1 = "./../../../comm-central"
REPO_MER_2 = "./../../../mozilla-central"

BUG_LIST_PATH = "./bugs-thunderbird.list"

client = MongoClient()
db = client[DB]
collection = db[COLLECTION]

bug = collection.find_one()

print("Example Bug:")
print(bug['id'])

bug2commits = dict()

repo_1 = Repo(REPO_GIT_1)
commits_1 = list(repo_1.iter_commits('master', max_count=1000000))
repo_2 = Repo(REPO_GIT_2)
commits_2 = list(repo_2.iter_commits('master', max_count=1000000))

client_1 = hglib.open(REPO_MER_1)
client_2 = hglib.open(REPO_MER_2)

# Add all bug ids of bug tracking system to dict
if not os.path.exists(BUG_LIST_PATH):
    utils.add_bugs_to_dict(bug2commits, collection)
    
    # write bug list into file for fast bug-id loading
    with open(BUG_LIST_PATH, "w") as f:
        for bug in bug2commits.keys():
            f.write(str(bug) + "\n")
else:
    # fast loading of bug-ids (only possible if bugs-[...].list already available)
    with open(BUG_LIST_PATH, "r") as f:
        lines = f.readlines()
        for bug in lines:
            bug2commits[bug[:-1]] = []
    # check if number of bugs in file is equal to the number in the database
    if len(bug2commits.keys()) != collection.count_documents({}):
        bug2commits = dict()
        utils.add_bugs_to_dict(bug2commits, collection)
        with open(BUG_LIST_PATH, "w") as f:
            for bug in bug2commits.keys():
                f.write(str(bug) + "\n")
                
print("Number of bugs in bug2commits: " + str(len(bug2commits.keys())))
print("Number of bugs in database: " + str(collection.count_documents({})))

with open("extra_thunderbird_revs_comm.json") as jf:
    bug2revs_1 = json.load(jf)

with open("extra_thunderbird_revs_mozilla.json") as jf:
    bug2revs_2 = json.load(jf)

number_bugs_min_one_rev = 0
for x in bug2revs_1.keys():
    if len(bug2revs_1[x]) > 0:
        number_bugs_min_one_rev += 1
for x in bug2revs_2.keys():
    if len(bug2revs_2[x]) > 0:
        number_bugs_min_one_rev += 1
print("Found " + str(number_bugs_min_one_rev) + " bugs with at least one linked revision number!")

updates = utils.match_hashes_commits_mercurial(bug2revs_1, bug2commits, commits_1, client_1.log())
updates = utils.match_hashes_commits_mercurial(bug2revs_2, bug2commits, commits_2, client_2.log())


with open("extra_thunderbird.json", "w") as jf:
    json.dump(bug2commits, jf)
print("Finished!")
