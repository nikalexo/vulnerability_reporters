import utils
from git import Repo
import json, os, sys
from pymongo import MongoClient
import hglib
import xml.etree.ElementTree as ET

root = ET.parse("./../../config.xml")

DB = root.find("mongodb").find("db").text
COLLECTION_1 = root.find("projects").find('.//product[@name=\'mozilla-core\']').find("collection").text
COLLECTION_2 = root.find("projects").find('.//product[@name=\'firefox\']').find("collection").text

REPO_GIT = "./../../../gecko-dev"
REPO_MER = "./../../../mozilla-central"

BUG_LIST_PATH = "./bugs-core-firefox.list"

client = MongoClient()
db = client[DB]
collection_1 = db[COLLECTION_1]
collection_2 = db[COLLECTION_2]

bug_1 = collection_1.find_one()
bug_2 = collection_2.find_one()

print("Example Bugs:")
print(bug_1['id'])
print(bug_2['id'])

bug2commits = dict()

repo = Repo(REPO_GIT)
commits = list(repo.iter_commits('master', max_count=1000000))

client = hglib.open(REPO_MER)

# Add all bug ids of bug tracking system to dict
utils.add_bugs_to_dict(bug2commits, collection_1)
utils.add_bugs_to_dict(bug2commits, collection_2)

print("Number of bugs in bug2commits: " + str(len(bug2commits.keys())))

with open("extra_core-firefox_revs.json") as jf:
    bug2revs = json.load(jf)

number_bugs_min_one_rev = 0
for x in bug2revs.keys():
    if len(bug2revs[x]) > 0:
        number_bugs_min_one_rev += 1
        
print("Found " + str(number_bugs_min_one_rev) + " bugs with at least one linked revision number!")

updates = utils.match_hashes_commits_mercurial(bug2revs, bug2commits, commits, client.log())

with open("extra_core-firefox.json", "w") as jf:
    json.dump(bug2commits, jf)
print("Finished!")
