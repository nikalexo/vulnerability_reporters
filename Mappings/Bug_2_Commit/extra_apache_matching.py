import utils
from git import Repo
import json, os, sys
from pymongo import MongoClient
import xml.etree.ElementTree as ET

root = ET.parse("./../../config.xml")

DB = root.find("mongodb").find("db").text
COLLECTION = root.find("projects").find('.//product[@name=\'apache\']').find("collection").text

REPO = "./../../../httpd"

BUG_LIST_PATH = "./bugs-apache.list"

client = MongoClient()
db = client[DB]
collection = db[COLLECTION]

bug = collection.find_one()

print("Example Bug:")
print(bug['id'])

if len(sys.argv) > 2:
    START = int(sys.argv[1])
    END = min(int(sys.argv[2]), collection.count_documents({}))
else:
    START = 0
    END = collection.count_documents({})


bug2commits = dict()

repo = Repo(REPO)
commits = list(repo.iter_commits('trunk', max_count=1000000))

# Add all bug-ids of bug tracking system to dict
if not os.path.exists(BUG_LIST_PATH):
    utils.add_bugs_to_dict(bug2commits, collection)
    
    # write bug list into file for fast bug-id loading
    with open(BUG_LIST_PATH, "w") as f:
        for bug in bug2commits.keys():
            f.write(str(bug) + "\n")
else:
    # fast loading of bug-ids (only possible if bugs-[...].list already available)
    with open(BUG_LIST_PATH, "r") as f:
        lines = f.readlines()
        for bug in lines:
            bug2commits[bug[:-1]] = []
    # check if number of bugs in file is equal to the number in the database
    if len(bug2commits.keys()) != collection.count_documents({}):
        bug2commits = dict()
        utils.add_bugs_to_dict(bug2commits, collection)
        with open(BUG_LIST_PATH, "w") as f:
            for bug in bug2commits.keys():
                f.write(str(bug) + "\n")

print("Number of bugs in bug2commits: " + str(len(bug2commits.keys())))
print("Number of bugs in database: " + str(collection.count_documents({})))


with open("extra_apache_revs.json") as jf:
    bug2revs = json.load(jf)

part_bug2revs = dict()
for bug in sorted(list(bug2revs.keys()))[START:END]:
    part_bug2revs[bug] = bug2revs[bug]

number_bugs_min_one_rev = 0
for x in part_bug2revs.keys():
    if len(part_bug2revs[x]) > 0:
        number_bugs_min_one_rev += 1
        
print("Found " + str(number_bugs_min_one_rev) + " bugs with at least one linked revision number!")

total_num_revs = 0
total_num_hexshas = 0

for bug in bug2revs:
    for rev in bug2revs[bug]:
        total_num_revs += 1
        for commit in commits:
            if "git-svn-id" in commit.message and "trunk@"+rev in commit.message:
                bug2commits[bug].append(commit.hexsha)
                total_num_hexshas += 1
            
print("Total number revision numbers:", total_num_revs)
print("Total number commit hashes:", total_num_hexshas)

with open("extra_apache.json", "w") as jf:
    json.dump(bug2commits, jf)
print("Finished!")
